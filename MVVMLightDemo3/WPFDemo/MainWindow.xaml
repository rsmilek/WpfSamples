<Window 
    x:Class="WPFDemo.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"

    xmlns:local="clr-namespace:WPFDemo"
    xmlns:models="clr-namespace:WPFDemo.Models"
    xmlns:viewmodels="clr-namespace:WPFDemo.ViewModel"
    xmlns:behaviours="clr-namespace:WPFDemo.Behaviors"
    xmlns:converters="clr-namespace:WPFDemo.Converters"
        
    mc:Ignorable="d"
    Title="{Binding Title}" 
    Height="470" Width="525"
    DataContext="{Binding MainViewModel, Source={StaticResource Locator}}">
    
    <Window.Resources>
        <converters:IsExpandedConverter x:Key="IsExpandedConverter" />
    </Window.Resources>

    <Grid>
        <StackPanel>
            <Button Content="MyButton" Command="{Binding MyButtonCommand}"></Button>
            <CheckBox Content="MyCheckBox" IsChecked="{Binding IsChecked}"></CheckBox>
            <CheckBox Content="IsExpanded" IsChecked="{Binding Node.IsExpanded}"></CheckBox>
            <CheckBox Content="IsExpanded 2" IsChecked="{Binding Node2.IsExpanded}"></CheckBox>
            
            <Button Content="Expand" Command="{Binding TreeExpandCommand}"></Button>
            <TreeView ItemsSource="{Binding TreeNodes}">
                <TreeView.Resources>
                    <HierarchicalDataTemplate DataType="{x:Type viewmodels:NodeMvvmViewModel}" ItemsSource="{Binding InnerItems}">
                        <TextBlock Text="{Binding Name}" />
                    </HierarchicalDataTemplate>
                </TreeView.Resources>
                <TreeView.ItemContainerStyle>
                    <Style TargetType="TreeViewItem">
                        <Setter Property="IsExpanded">
                            <Setter.Value>
                                <MultiBinding Converter="{StaticResource IsExpandedConverter}">
                                     <!--Binding to the data item--> 
                                    <Binding />
                                     <!--Binding to the current state of IsExpanded--> 
                                    <Binding RelativeSource="{RelativeSource Self}" Path="IsExpanded" Mode="TwoWay" />
                                </MultiBinding>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </TreeView.ItemContainerStyle>
            </TreeView>

            <Button Content="Expand 2" Command="{Binding TreeExpand2Command}"></Button>
            <TreeView ItemsSource="{Binding TreeNodes2}">
                <TreeView.Resources>
                    <HierarchicalDataTemplate DataType="{x:Type viewmodels:NodeMvvmViewModel}" ItemsSource="{Binding InnerItems}">
                        <TextBlock Text="{Binding Name}" />
                    </HierarchicalDataTemplate>
                </TreeView.Resources>
                <TreeView.ItemContainerStyle>
                    <Style TargetType="TreeViewItem">
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
                    </Style>
                </TreeView.ItemContainerStyle>
            </TreeView>

            
            
            
            

            <Button Content="Expand Fody" Command="{Binding TreeExpandFodyCommand}"></Button>
            <TreeView ItemsSource="{Binding TreeNodesFody}">
                <TreeView.Resources>
                    <HierarchicalDataTemplate DataType="{x:Type viewmodels:NodeFodyViewModel}" ItemsSource="{Binding InnerItems}">
                        <TextBlock Text="{Binding Name}" />
                    </HierarchicalDataTemplate>
                </TreeView.Resources>
                <TreeView.ItemContainerStyle>
                    <Style TargetType="TreeViewItem">
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
                    </Style>
                </TreeView.ItemContainerStyle>
            </TreeView>


            <DataGrid x:Name="myDataGrid" AutoGenerateColumns="False">
                <DataGrid.Columns>
                    <DataGridComboBoxColumn Header="Employee Type" />
                    <DataGridComboBoxColumn Header="Pokus 2" />
                </DataGrid.Columns>
            </DataGrid>

            <Border BorderBrush="Silver" BorderThickness="0,2,0,2">
                <Border.Background>
                    <LinearGradientBrush StartPoint="0 0" EndPoint="0 1">
                        <LinearGradientBrush.GradientStops>
                            <GradientStop Offset="0.0" Color="White" />
                            <GradientStop Offset="0.5" Color="WhiteSmoke" />
                            <GradientStop Offset="1.0" Color="White" />
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Border.Background>
                <StackPanel Orientation="Horizontal">
                    <Border BorderBrush="Gainsboro" BorderThickness="0,0,2,0">
                        <StackPanel Orientation="Horizontal" Margin="10,0,10,0">
                            <Button Background="Transparent" BorderBrush="Transparent">
                                <Image Source="Resources/Images/Plus.png" Margin="3,0,3,0"/>
                            </Button>
                            <Button Background="Transparent" BorderBrush="Transparent">
                                <Image Source="Resources/Images/Minus.png" Margin="3,0,3,0"/>
                            </Button>
                        </StackPanel>
                    </Border>
                    <Label Content="Custom label"  Margin="10,0,0,0"/>
                </StackPanel>
            </Border>



            <Label Height="30">
                Right button click me!
                <i:Interaction.Triggers>
                    <!-- define component's event name for further use in code behind command implementation -->
                    <i:EventTrigger EventName="MouseRightButtonDown">
                        <i:InvokeCommandAction Command="{Binding MouseRightButtonDownCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Label>

        </StackPanel>
    </Grid>
</Window>
