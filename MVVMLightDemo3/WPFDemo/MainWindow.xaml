<Window 
    x:Class="WPFDemo.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"

    xmlns:system="clr-namespace:System;assembly=mscorlib"
    
    xmlns:local="clr-namespace:WPFDemo"
    xmlns:models="clr-namespace:WPFDemo.Models"
    xmlns:views="clr-namespace:WPFDemo.View"
    xmlns:viewmodels="clr-namespace:WPFDemo.ViewModel"
    xmlns:behaviours="clr-namespace:WPFDemo.Behaviors"
    xmlns:converters="clr-namespace:WPFDemo.Converters"
        
    mc:Ignorable="d"
    Title="{Binding Title}" 
    Height="800" Width="800"
    DataContext="{Binding MainViewModel, Source={StaticResource Locator}}">
    
    <Window.Resources>
        <converters:IsExpandedConverter x:Key="IsExpandedConverter" />

        <!-- Therefore, if you assign this Style an x:Key value, you are overriding the implicit x:Key 
        and the Style would not be applied automatically. So x:Key value must be defined on a control. -->
        <Style x:Key="ContentCtrlStyle" TargetType="{x:Type ContentControl}">
            <Setter Property="Background" Value="Red"/>
            <Setter Property="Foreground" Value="Green"/>
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ContentControl}">
                        <Grid>
                            <!--Keep the Ellipse a circle when ContentControl.Width is set.-->
                            <Ellipse 
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Width}"
                                Fill="{TemplateBinding Background}"/>
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Button.IsMouseOver" Value="True">
                    <Setter Property="Background" Value="Yellow" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Static resource XAML definition example -->
        <local:TodoItemCollection x:Key="TodoItemsXaml">
            <models:TodoItem Name="Item 1" Description="IMPORTANT" Priority="1" />
            <models:TodoItem Name="Item 2" Description="Description 2" Priority="2" />
        </local:TodoItemCollection>
        
        <!-- Data template as static resource definition example - standard item -->
        <DataTemplate x:Key="TodoItemDataTemplate" DataType="{x:Type models:TodoItem}">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="{Binding Name}" Margin="5" />
                <TextBlock Text="{Binding Priority}" Margin="5" />
                <TextBlock Text="{Binding Description}" Margin="5" />
            </StackPanel>
        </DataTemplate>

        <!-- Data template as static resource definition example - extra important item -->
        <DataTemplate x:Key="TodoImportantItemDataTemplate" DataType="{x:Type models:TodoItem}">
            <DataTemplate.Resources>
                <Style x:Key="BaseStyle" TargetType="TextBlock">
                    <Setter Property="FontSize" Value="20"/>
                </Style>
                <Style x:Key="InheritedStyle" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                    <Setter Property="FontStyle" Value="Italic"/>
                </Style>
            </DataTemplate.Resources>
            <Border Name="border" BorderBrush="Red" BorderThickness="1" Padding="5" Margin="5">
                <DockPanel HorizontalAlignment="Center">
                    <TextBlock Text="{Binding Path=Description}" Style="{StaticResource InheritedStyle}"/>
                    <TextBlock Style="{StaticResource InheritedStyle}">!</TextBlock>
                </DockPanel>
            </Border>
        </DataTemplate>

        <!-- DataTemplate selector as static resource definition example -->
        <viewmodels:TodoItemDataTemplateSelector x:Key="todoItemDataTemplateSelector"/>
        

        <!-- Static resource XAML definition example -->
        <ObjectDataProvider x:Key="personDataSource" ObjectType="{x:Type models:Person}">
            <ObjectDataProvider.ConstructorParameters>
                <system:String>Joe</system:String>
            </ObjectDataProvider.ConstructorParameters>
        </ObjectDataProvider>

        <!-- Static resource XAML definition example -> 'Tasks' is collection declared in code-behind and referenced in XAML as 'tasksItemSource' -->
        <local:Tasks x:Key="tasksItemSource"/>

    </Window.Resources>

    
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition></ColumnDefinition>
            <ColumnDefinition></ColumnDefinition>
        </Grid.ColumnDefinitions>

        <StackPanel Grid.Column="0">
            <Button Content="MyButton" Command="{Binding MyButtonCommand}"></Button>
            <CheckBox Content="MyCheckBox" IsChecked="{Binding IsChecked}"></CheckBox>
            <CheckBox Content="IsExpanded" IsChecked="{Binding Node.IsExpanded}"></CheckBox>
            <CheckBox Content="IsExpanded 2" IsChecked="{Binding Node2.IsExpanded}"></CheckBox>
            
            <Button Content="Expand" Command="{Binding TreeExpandCommand}"></Button>
            <TreeView ItemsSource="{Binding TreeNodes}">
                <TreeView.Resources>
                    <HierarchicalDataTemplate DataType="{x:Type viewmodels:NodeMvvmViewModel}" ItemsSource="{Binding InnerItems}">
                        <TextBlock Text="{Binding Name}" />
                    </HierarchicalDataTemplate>
                </TreeView.Resources>
                <TreeView.ItemContainerStyle>
                    <Style TargetType="TreeViewItem">
                        <Setter Property="IsExpanded">
                            <Setter.Value>
                                <MultiBinding Converter="{StaticResource IsExpandedConverter}">
                                     <!--Binding to the data item--> 
                                    <Binding />
                                     <!--Binding to the current state of IsExpanded--> 
                                    <Binding RelativeSource="{RelativeSource Self}" Path="IsExpanded" Mode="TwoWay" />
                                </MultiBinding>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </TreeView.ItemContainerStyle>
            </TreeView>

            <Button Content="Expand 2" Command="{Binding TreeExpand2Command}"></Button>
            <TreeView ItemsSource="{Binding TreeNodes2}">
                <TreeView.Resources>
                    <HierarchicalDataTemplate DataType="{x:Type viewmodels:NodeMvvmViewModel}" ItemsSource="{Binding InnerItems}">
                        <TextBlock Text="{Binding Name}" />
                    </HierarchicalDataTemplate>
                </TreeView.Resources>
                <TreeView.ItemContainerStyle>
                    <Style TargetType="TreeViewItem">
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
                    </Style>
                </TreeView.ItemContainerStyle>
            </TreeView>

            
            
            
            

            <Button Content="Expand Fody" Command="{Binding TreeExpandFodyCommand}"></Button>
            <TreeView ItemsSource="{Binding TreeNodesFody}">
                <TreeView.Resources>
                    <HierarchicalDataTemplate DataType="{x:Type viewmodels:NodeFodyViewModel}" ItemsSource="{Binding InnerItems}">
                        <TextBlock Text="{Binding Name}" />
                    </HierarchicalDataTemplate>
                </TreeView.Resources>
                <TreeView.ItemContainerStyle>
                    <Style TargetType="TreeViewItem">
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
                    </Style>
                </TreeView.ItemContainerStyle>
            </TreeView>


            <DataGrid x:Name="myDataGrid" AutoGenerateColumns="False">
                <DataGrid.Columns>
                    <DataGridComboBoxColumn Header="Employee Type" />
                    <DataGridComboBoxColumn Header="Pokus 2" />
                </DataGrid.Columns>
            </DataGrid>

            <Border BorderBrush="Silver" BorderThickness="0,2,0,2">
                <Border.Background>
                    <LinearGradientBrush StartPoint="0 0" EndPoint="0 1">
                        <LinearGradientBrush.GradientStops>
                            <GradientStop Offset="0.0" Color="White" />
                            <GradientStop Offset="0.5" Color="WhiteSmoke" />
                            <GradientStop Offset="1.0" Color="White" />
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Border.Background>
                <StackPanel Orientation="Horizontal">
                    <Border BorderBrush="Gainsboro" BorderThickness="0,0,2,0">
                        <StackPanel Orientation="Horizontal" Margin="10,0,10,0">
                            <Button Background="Transparent" BorderBrush="Transparent">
                                <Image Source="Resources/Images/Plus.png" Margin="3,0,3,0"/>
                            </Button>
                            <Button Background="Transparent" BorderBrush="Transparent">
                                <Image Source="Resources/Images/Minus.png" Margin="3,0,3,0"/>
                            </Button>
                        </StackPanel>
                    </Border>
                    <Label Content="Custom label"  Margin="10,0,0,0"/>
                </StackPanel>
            </Border>



            <Label Height="30">
                Right button click me!
                <i:Interaction.Triggers>
                    <!-- define component's event name for further use in code behind command implementation -->
                    <i:EventTrigger EventName="MouseRightButtonDown">
                        <i:InvokeCommandAction Command="{Binding MouseRightButtonDownCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Label>

            <StackPanel Orientation="Horizontal">
                <Label Content="Parameter" />
                <TextBox x:Name="tbParameter" Text="ParameterValue" />
                <Button Content="Command with parameter" 
                    Command="{Binding CommandWithParameterCommand}" 
                    CommandParameter="{Binding Text, ElementName=tbParameter}"/>
            </StackPanel>



            <!-- Static resources example: data & DataTemplate -->
            <!--<ListBox ItemsSource="{StaticResource TodoItemsCodeBehind}" ItemTemplate="{StaticResource TodoItemDataTemplate}" />-->
            <!--<ListBox ItemsSource="{StaticResource TodoItemsXaml}" ItemTemplate="{StaticResource TodoItemDataTemplate}" />-->
            <ListBox ItemsSource="{StaticResource TodoItemsXaml}" 
                     ItemTemplateSelector="{StaticResource todoItemDataTemplateSelector}"/>


            <!-- Data Biding example -> UpdateSourceTrigger -->
            <Border Margin="3" BorderBrush="Aqua" BorderThickness="2" Padding="2">
                <StackPanel Orientation="Horizontal">
                    <StackPanel Orientation="Vertical" Width="200">
                        <Label>Enter a Name:</Label>
                        <TextBox>
                            <TextBox.Text>
                                <Binding Source="{StaticResource personDataSource}" Path="Name" UpdateSourceTrigger="LostFocus" />
                            </TextBox.Text>
                        </TextBox>
                    </StackPanel>
                    <StackPanel Orientation="Vertical"  Width="200">
                        <Label>The name you entered:</Label>
                        <TextBlock Text="{Binding Source={StaticResource personDataSource}, Path=Name}"/>
                    </StackPanel>
                </StackPanel>
            </Border>
            
            
        </StackPanel>





        <StackPanel Grid.Column="1">
            <Button>
                <Button.Content>
                    Right-click me! (ContextMenu example)
                </Button.Content>
                <Button.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="1">First item</MenuItem>
                        <MenuItem Header="2">Second item</MenuItem>
                    </ContextMenu>
                </Button.ContextMenu>
            </Button>



            <Border Height="35" BorderThickness="3" Background="Aqua">
                <Label>Border example</Label>
            </Border>



            <!-- ContentControl can be controls like Button, ...  -->
            <ContentControl Style="{StaticResource ContentCtrlStyle}" 
                Width="75" Content="Hello" />




            <!-- ItemsControl can be controls like ListBox, ComboBox,... -->
            <!-- This is a templating example of ItemsControl, but modified against original in sense of item definition - 
            original item object with fields like Priority/TaskName/Description is replaced by string item only. 
            source: https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.itemscontrol?view=windowsdesktop-8.0 -->
            <ItemsControl Margin="10" ItemsSource="{Binding StringItems}">
                <!--The ItemsControl has no default visual appearance.
                Use the Template property to specify a ControlTemplate to define the appearance of an ItemsControl.
                The ItemsPresenter uses the specified ItemsPanelTemplate (see below) to layout the items.
                If an ItemsPanelTemplate is not specified, the default is used. 
                (For ItemsControl, the default is an ItemsPanelTemplate that specifies a StackPanel.-->
                <ItemsControl.Template>
                    <ControlTemplate TargetType="ItemsControl">
                        <Border BorderBrush="Aqua" BorderThickness="3" CornerRadius="15">
                            <ItemsPresenter/>
                        </Border>
                    </ControlTemplate>
                </ItemsControl.Template>
                <!--Use the ItemsPanel property to specify an ItemsPanelTemplate that defines the panel that is used
                to hold the generated items. In other words, use this property if you want to affect how the items are laid out.-->
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel />
                        <!--<StackPanel />-->
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <!--Use the ItemTemplate to set a DataTemplate to define the visualization of the data objects. This DataTemplate
                specifies that each data object appears with the Priority and TaskName on top of a silver ellipse.-->
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <DataTemplate.Resources>
                            <Style TargetType="TextBlock">
                                <Setter Property="FontSize" Value="18"/>
                                <Setter Property="HorizontalAlignment" Value="Center"/>
                            </Style>
                        </DataTemplate.Resources>
                        <Grid>
                            <Ellipse Fill="Silver"/>
                            <StackPanel>
                                <!--<TextBlock Margin="3,3,3,0" Text="{Binding Path=Priority}"/>
                                <TextBlock Margin="3,0,3,7" Text="{Binding Path=TaskName}"/>-->
                                <TextBlock Margin="3,3,3,0" Text="{Binding .}"/>
                            </StackPanel>
                        </Grid>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
                <!--Use the ItemContainerStyle property to specify the appearance of the element that contains the data.
                This ItemContainerStyle gives each item container a margin and a width. There is also a trigger that sets 
                a tooltip that shows the description of the data object when the mouse hovers over the item container.-->
                <ItemsControl.ItemContainerStyle>
                    <Style>
                        <Setter Property="Control.Width" Value="100"/>
                        <Setter Property="Control.Margin" Value="5"/>
                        <Style.Triggers>
                            <Trigger Property="Control.IsMouseOver" Value="True">
                                <!--<Setter Property="Control.ToolTip" 
                                        Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=Content.Description}"/>-->
                                <Setter Property="Control.ToolTip" 
                                        Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=Content}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ItemsControl.ItemContainerStyle>
            </ItemsControl>



            <!-- UserControl / View inserting example -->
            <views:ValueUnitView DataContext="{Binding ValueUnit}"/>

        </StackPanel>

    </Grid>
</Window>
